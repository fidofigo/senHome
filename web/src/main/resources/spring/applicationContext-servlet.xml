<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
	http://www.springframework.org/schema/task 
	http://www.springframework.org/schema/task/spring-task-3.0.xsd">
	
	<task:executor id="executor" pool-size="5" />  
    <task:scheduler id="scheduler" pool-size="10" />  
    <task:annotation-driven executor="executor" scheduler="scheduler" />  
	

	<!-- 将隐式地向Spring容器注册AutowiredAnnotationBeanPostProcessor、 CommonAnnotationBeanPostProcessor、 
		PersistenceAnnotationBeanPostProcessor 以及RequiredAnnotationBeanPostProcessor这4个BeanPostProcessor 
		<context:annotation-config /> -->
	<!-- 启用了对类包进行扫描以实施注释驱动Bean定义的功能, 同时还启用了注释驱动自动注入的功能（即还隐式地在内部注册了AutowiredAnnotationBeanPostProcessor和CommonAnnotationBeanPostProcessor, 
		因此当使用<context:component-scan />后，就可以将<context:annotation-config />移除了 -->
	<!-- <context:annotation-config /> -->

	<aop:aspectj-autoproxy />
	
	
	
	<!--是默认实现,可以不写，Spring容器默认会默认使用该类 启动Spring MVC的注解功能，完成请求和注解POJO的映射
	<bean id="urlMapping"
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
	 -->
	
<!--
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>
 -->
 
 
 <!--
      spring mvc返回json格式疑问@ResponseBody
               经过排查原来是配置文件方式不同引起的：
               首先引入
      jackson-core-asl-1.6.4.jar
      jackson-mapper-asl-1.6.4.jar
               如果是：<mvc:annotation-driven />那么则没有问题,如果把配置换成
      <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
      <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
              则会报异常.那么需要补充配置,如果是<mvc:annotation-driven />返回类型不能是ModelAndView.如过是以下配置ModelAndView会解析成json数据
  <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
    <property name="messageConverters">
     <list>
        <ref bean="jsonHttpMessageConverter"/>
     </list>
   </property>
</bean>

<bean id="jsonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
-->
 
 
 

    <!-- 相当于注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean，配置一些messageconverter。即解决了@Controller注解的使用前提配置 -->
	<mvc:annotation-driven>
        <mvc:message-converters>  
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">  
               <constructor-arg ref="utf8Charset" />  
            </bean>  
        </mvc:message-converters>  
    </mvc:annotation-driven>  
    
    <!-- Use-dafault-filters=”false”的情况下：<context:exclude-filter>指定的不扫描，<context:include-filter>指定的扫描 -->
	<context:component-scan base-package="com.senhome.service, com.senhome.web" use-default-filters="true"></context:component-scan>
    


<!-- 
	<bean id="ViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
		<property name="order" value="1"/>
		<property name="prefix" value="/views/"></property>
		<property name="suffix" value=".jsp"></property>
		<property name="contentType" value="text/html; charset=UTF-8" />
	</bean>-->


	<!-- 设置 HandlerExceptionResolver -->
	<bean id="handlerExceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView" value="/error" />
		<property name="defaultStatusCode" value="500" />
	</bean>

	<bean id="utf8Charset" class="java.nio.charset.Charset"
        factory-method="forName">  
       	<constructor-arg value="UTF-8"/>
   	</bean>

</beans>